package postcode

import "regexp"

type PostCodeValidator struct {
	CountryRegexMapping map[string]string
}

func NewPostCodeValidator() *PostCodeValidator {
	return &PostCodeValidator{
		CountryRegexMapping: map[string]string{
			"GB":   `\?i^?i([A-Z]){1}([0-9][0-9]|[0-9]|[A-Z][0-9][A-Z]|[A-Z][0-9][0-9]|[A-Z][0-9]|[0-9][A-Z]){1}([ ])?([0-9][A-z][A-z]){1}$`,
			"JE":   `\?i^JE\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}$`,
			"GG":   `\?i^GY\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}$`,
			"IM":   `\?i^IM\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}$$`,
			"US":   `\?i^([0-9]{5})(?:-([0-9]{4}))?$`,
			"CA":   `\?i^([ABCEGHJKLMNPRSTVXY][0-9][ABCEGHJKLMNPRSTVWXYZ])\s*([0-9][ABCEGHJKLMNPRSTVWXYZ][0-9])$`,
			"IE":   `\?i^([AC-FHKNPRTV-Y][0-9]{2}|D6W)[ -]?[0-9AC-FHKNPRTV-Y]{4}$`,
			"DE":   `\?i^\d{5}$`,
			"JP":   `\?i^\d{3}-\d{4}$`,
			"FR":   `\?i^\d{2}[ ]?\d{3}$`,
			"AU":   `\?i^\d{4}$`,
			"IT":   `\?i^\d{5}$`,
			"CH":   `\?i^\d{4}$`,
			"AT":   `\?i^(?!0)\d{4}$`,
			"ES":   `\?i^(?:0[1-9]|[1-4]\d|5[0-2])\d{3}$`,
			"NL":   `\?i^\d{4}[ ]?[A-Z]{2}$`,
			"BE":   `\?i^\d{4}$`,
			"DK":   `\?i^\d{4}$`,
			"SE":   `\?i^(SE-)?\d{3}[ ]?\d{2}$`,
			"NO":   `\?i^\d{4}$`,
			"BR":   `\?i^\d{5}[\-]?\d{3}$`,
			"PT":   `\?i^\d{4}([\-]\d{3})?$`,
			"FI":   `\?i^(FI-|AX-)?\d{5}$`,
			"AX":   `\?i^22\d{3}$`,
			"KR":   `\?i^\d{5}$`,
			"CN":   `\?i^\d{6}$`,
			"TW":   `\?i^\d{3}(\d{2})?$`,
			"SG":   `\?i^\d{6}$`,
			"DZ":   `\?i^\d{5}$`,
			"AD":   `\?i^AD\d{3}$`,
			"AR":   `\?i^([A-HJ-NP-Z])?\d{4}([A-Z]{3})?$`,
			"AM":   `\?i^(37)?\d{4}$`,
			"AZ":   `\?i^\d{4}$`,
			"BH":   `\?i^((1[0-2]|[2-9])\d{2})?$`,
			"BD":   `\?i^\d{4}$`,
			"BB":   `\?i^(BB\d{5})?$`,
			"BY":   `\?i^\d{6}$`,
			"BM":   `\?i^[A-Z]{2}[ ]?[A-Z0-9]{2}$`,
			"BA":   `\?i^\d{5}$`,
			"IO":   `\?i^BBND 1ZZ$`,
			"BN":   `\?i^[A-Z]{2}[ ]?\d{4}$`,
			"BG":   `\?i^\d{4}$`,
			"KH":   `\?i^\d{5}$`,
			"CV":   `\?i^\d{4}$`,
			"CL":   `\?i^\d{7}$`,
			"CR":   `\?i^(\d{4,5}|\d{3}-\d{4})$`,
			"HR":   `\?i^(HR-)?\d{5}$`,
			"CY":   `\?i^\d{4}$`,
			"CZ":   `\?i^\d{3}[ ]?\d{2}$`,
			"DO":   `\?i^\d{5}$`,
			"EC":   `\?i^([A-Z]\d{4}[A-Z]|(?:[A-Z]{2})?\d{6})?$`,
			"EG":   `\?i^\d{5}$`,
			"EE":   `\?i^\d{5}$`,
			"FO":   `\?i^\d{3}$`,
			"GE":   `\?i^\d{4}$`,
			"GR":   `\?i^\d{3}[ ]?\d{2}$`,
			"GL":   `\?i^39\d{2}$`,
			"GT":   `\?i^\d{5}$`,
			"HT":   `\?i^\d{4}$`,
			"HN":   `\?i^(?:\d{5})?$`,
			"HU":   `\?i^\d{4}$`,
			"IS":   `\?i^\d{3}$`,
			"IN":   `\?i^\d{6}$`,
			"ID":   `\?i^\d{5}$`,
			"IL":   `\?i^\d{5,7}$`,
			"JO":   `\?i^\d{5}$`,
			"KZ":   `\?i^\d{6}$`,
			"KE":   `\?i^\d{5}$`,
			"KW":   `\?i^\d{5}$`,
			"LA":   `\?i^\d{5}$`,
			"LV":   `\?i^(LV-)?\d{4}$`,
			"LB":   `\?i^(\d{4}([ ]?\d{4})?)?$`,
			"LI":   `\?i^(948[5-9])|(949[0-7])$`,
			"LT":   `\?i^(LT-)?\d{5}$`,
			"LU":   `\?i^(L-)?\d{4}$`,
			"MK":   `\?i^\d{4}$`,
			"MY":   `\?i^\d{5}$`,
			"MV":   `\?i^\d{5}$`,
			"MT":   `\?i^[A-Z]{3}[ ]?\d{2,4}$`,
			"MU":   `\?i^((\d|[A-Z])\d{4})?$`,
			"MX":   `\?i^\d{5}$`,
			"MD":   `\?i^\d{4}$`,
			"MC":   `\?i^980\d{2}$`,
			"MA":   `\?i^\d{5}$`,
			"NP":   `\?i^\d{5}$`,
			"NZ":   `\?i^\d{4}$`,
			"NI":   `\?i^((\d{4}-)?\d{3}-\d{3}(-\d{1})?)?$`,
			"NG":   `\?i^(\d{6})?$`,
			"OM":   `\?i^(PC )?\d{3}$`,
			"PA":   `\?i^\d{4}$`,
			"PK":   `\?i^\d{5}$`,
			"PY":   `\?i^\d{4}$`,
			"PH":   `\?i^\d{4}$`,
			"PL":   `\?i^\d{2}-\d{3}$`,
			"PR":   `\?i^00[679]\d{2}([ \-]\d{4})?$`,
			"RO":   `\?i^\d{6}$`,
			"RU":   `\?i^\d{6}$`,
			"SM":   `\?i^4789\d$`,
			"SA":   `\?i^\d{5}$`,
			"SN":   `\?i^\d{5}$`,
			"SK":   `\?i^\d{3}[ ]?\d{2}$`,
			"SI":   `\?i^(SI-)?\d{4}$`,
			"ZA":   `\?i^\d{4}$`,
			"LK":   `\?i^\d{5}$`,
			"TJ":   `\?i^\d{6}$`,
			"TH":   `\?i^\d{5}$`,
			"TN":   `\?i^\d{4}$`,
			"TR":   `\?i^\d{5}$`,
			"TM":   `\?i^\d{6}$`,
			"UA":   `\?i^\d{5}$`,
			"UY":   `\?i^\d{5}$`,
			"UZ":   `\?i^\d{6}$`,
			"VA":   `\?i^00120$`,
			"VE":   `\?i^\d{4}$`,
			"ZM":   `\?i^\d{5}$`,
			"AS":   `\?i^96799$`,
			"CC":   `\?i^6799$`,
			"CK":   `\?i^\d{4}$`,
			"RS":   `\?i^\d{5,6}$`,
			"ME":   `\?i^8\d{4}$`,
			"CS":   `\?i^\d{5}$`,
			"YU":   `\?i^\d{5}$`,
			"CX":   `\?i^6798$`,
			"ET":   `\?i^\d{4}$`,
			"FK":   `\?i^FIQQ 1ZZ$`,
			"NF":   `\?i^2899$`,
			"FM":   `\?i^(9694[1-4])([ \-]\d{4})?$`,
			"GF":   `\?i^9[78]3\d{2}$`,
			"GN":   `\?i^\d{3}$`,
			"GP":   `\?i^9[78][01]\d{2}$`,
			"GS":   `\?i^SIQQ 1ZZ$`,
			"GU":   `\?i^969[123]\d([ \-]\d{4})?$`,
			"GW":   `\?i^\d{4}$`,
			"HM":   `\?i^\d{4}$`,
			"IQ":   `\?i^\d{5}$`,
			"KG":   `\?i^\d{6}$`,
			"LR":   `\?i^\d{4}$`,
			"LS":   `\?i^\d{3}$`,
			"MG":   `\?i^\d{3}$`,
			"MH":   `\?i^969[67]\d([ \-]\d{4})?$`,
			"MN":   `\?i^\d{6}$`,
			"MP":   `\?i^9695[012]([ \-]\d{4})?$`,
			"MQ":   `\?i^9[78]2\d{2}$`,
			"NC":   `\?i^988\d{2}$`,
			"NE":   `\?i^\d{4}$`,
			"VI":   `\?i^008(([0-4]\d)|(5[01]))([ \-]\d{4})?$`,
			"VN":   `\?i^\d{6}$`,
			"PF":   `\?i^987\d{2}$`,
			"PG":   `\?i^\d{3}$`,
			"PM":   `\?i^9[78]5\d{2}$`,
			"PN":   `\?i^PCRN 1ZZ$`,
			"PW":   `\?i^96940$`,
			"RE":   `\?i^9[78]4\d{2}$`,
			"SH":   `\?i^(ASCN|STHL) 1ZZ$`,
			"SJ":   `\?i^\d{4}$`,
			"SO":   `\?i^\d{5}$`,
			"SZ":   `\?i^[HLMS]\d{3}$`,
			"TC":   `\?i^TKCA 1ZZ$`,
			"WF":   `\?i^986\d{2}$`,
			"XK":   `\?i^\d{5}$`,
			"YT":   `\?i^976\d{2}$`,
			"INTL": `\?i^(?:[A-Z0-9]+([- ]?[A-Z0-9]+)*)?$`,
		},
	}
}

func (v *PostCodeValidator) ValidatePostalCode(countryCode, postalCode string) bool {
	regex, ok := regexp.Compile(v.CountryRegexMapping[countryCode])
	if ok != nil {
		return false
	}

	return regex.MatchString(postalCode)
}
